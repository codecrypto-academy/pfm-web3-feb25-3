import FabricCAServices from 'fabric-ca-client';
import { Wallets, X509Identity } from 'fabric-network';
import { User, ICryptoSuite, Utils, ICryptoKey, IKeyValueStore } from 'fabric-common';
import * as path from 'path';
import * as fs from 'fs/promises';

// Ruta de la wallet donde se almacenan las identidades
const walletPath = path.resolve(__dirname, '../../wallet');
const orgBasePath = path.resolve(__dirname, '../../../../fabric-samples/test-network/organizations/peerOrganizations');
const caBasePath = path.resolve(__dirname, '../../../../fabric-samples/test-network/organizations/fabric-ca');

/*
El t√©rmino enroll en Fabric CA se refiere al proceso de inscripci√≥n de un usuario en la autoridad certificadora (CA) para obtener su certificado digital (cert.pem).
Este certificado es lo que le permite autenticarse en la red de Hyperledger Fabric.
*/
export class FabricCAClient {

  private async getFabricCA(mspId: string): Promise<FabricCAServices> {
    let caUrl, tlsCertPath, caName;

    if (mspId === 'Org1MSP') {
        caUrl = 'https://localhost:7054';
        tlsCertPath = path.resolve(caBasePath, 'org1', 'tls-cert.pem');
        caName = 'ca-org1'; // Agrega el nombre de la CA
    } else {
        caUrl = 'https://localhost:8054';
        tlsCertPath = path.resolve(caBasePath, 'org2', 'tls-cert.pem');
        caName = 'ca-org2'; // Agrega el nombre de la CA
    }

    // Leer el certificado TLS
    const tlsCert = await fs.readFile(tlsCertPath, 'utf8');

    // Configurar opciones TLS para la conexi√≥n con Fabric CA
    const caOptions = {
        trustedRoots: [tlsCert],
        verify: false, // Cambiar a true si quieres validaci√≥n estricta de certificados
    };

    return new FabricCAServices(caUrl, caOptions, caName); // ‚úÖ Agregar nombre de CA
}


	/**
		* Obtiene la identidad del administrador como un objeto `User` v√°lido para Fabric CA.
		*/
		private async getAdminIdentity(mspId: string): Promise<User> {
			const wallet = await Wallets.newFileSystemWallet(walletPath);
			const adminLabel = `admin-${mspId}`;

			// üìå Intentar obtener el admin desde la wallet
			let identity = await wallet.get(adminLabel) as X509Identity;
			if (!identity) {
				console.log(`‚ö†Ô∏è No se encontr√≥ la identidad del administrador en la wallet. Buscando en organizations...`);

				// üìå **Importar admin desde `organizations/peerOrganizations/.../users/`**
				const orgName = mspId === 'Org1MSP' ? 'org1.example.com' : 'org2.example.com';
				const adminPath = path.join(orgBasePath, orgName, 'users', `Admin@${orgName}`, 'msp');
				const certPath = path.join(adminPath, 'signcerts', `cert.pem`);
				const keyDir = path.join(adminPath, 'keystore');

				// üìå **Leer certificado y clave privada del administrador**
				const certificate = await fs.readFile(certPath, 'utf8');
				const keyFiles = await fs.readdir(keyDir);
				if (keyFiles.length === 0) {
					throw new Error(`‚ùå No se encontr√≥ clave privada en ${keyDir}`);
				}
				const privateKeyPEM = await fs.readFile(path.join(keyDir, keyFiles[0]), 'utf8');

				// üìå **Crear identidad X.509 para la wallet**
				const adminIdentity: X509Identity = {
					credentials: { certificate, privateKey: privateKeyPEM },
					mspId: mspId,
					type: 'X.509',
				};

				// üìå **Guardar la identidad en la wallet para futuros usos**
				await wallet.put(adminLabel, adminIdentity);
				console.log(`‚úÖ Admin ${adminLabel} importado y guardado en la wallet`);

				identity = adminIdentity;
			} else {
				console.log(`‚úÖ Admin ${adminLabel} encontrado en la wallet`);
			}

			// üìå **Configurar `CryptoSuite` correctamente**
			const cryptoSuite: ICryptoSuite = Utils.newCryptoSuite();
			const cryptoKeyStore = Utils.newCryptoKeyStore();
			cryptoSuite.setCryptoKeyStore(cryptoKeyStore);

			// üî• ‚úÖ **Ahora `importKey()` funcionar√° sin errores**
			const privateKey = await cryptoSuite.importKey(identity.credentials.privateKey);

			// üìå **Crear objeto `User` v√°lido**
			const adminUser = new User(adminLabel);
			await adminUser.setEnrollment(privateKey, identity.credentials.certificate, mspId);
			adminUser.setCryptoSuite(cryptoSuite);

			console.log(`‚úÖ Admin ${adminLabel} listo para usar en Fabric CA`);
			return adminUser;
		}




	async registerUser(ethereumAddress: string, role: string, mspId: string): Promise<X509Identity> {
		const ca = await this.getFabricCA(mspId);
		const wallet = await Wallets.newFileSystemWallet(walletPath);
		const adminIdentity = await this.loginWithUserIDAndPassword('admin', 'adminpw', mspId);

		console.log(`Registrando usuario ${ethereumAddress} con rol ${role} en ${mspId}`);

		// Verificar si el usuario ya existe en la wallet
		const userIdentity = await wallet.get(ethereumAddress);
		if (userIdentity) {
			console.log(`Usuario ${ethereumAddress} ya existe en la wallet`);
			return userIdentity as X509Identity;
		}

		const provider = ca.newIdentityService();
		try {
			await provider.getOne(ethereumAddress, adminIdentity);
			console.log(`Usuario ${ethereumAddress} ya existe en Fabric CA`);
			return userIdentity as X509Identity;
		} catch (error) {
			console.log(`Usuario no encontrado en CA, se proceder√° al registro.`);
		}

		// ‚úÖ üî• Correcci√≥n: Ahora `adminIdentity` es un `User` v√°lido para Fabric CA
		const secret = await ca.register(
			{
				enrollmentID: ethereumAddress,
				role: 'client',
				affiliation: '', // Importante dejarlo vac√≠o si no usas afiliaciones
				attrs: [
					{ name: 'role', value: role, ecert: true },
					{ name: 'ethAddress', value: ethereumAddress, ecert: true },
				],
			},
			adminIdentity // ‚úÖ Ahora adminIdentity es un `User`, no una `X509Identity`
		);

		// Enrolar el usuario y obtener sus credenciales
		const enrollment = await ca.enroll({
			enrollmentID: ethereumAddress,
			enrollmentSecret: secret,
		});

		// Crear y almacenar la identidad en la wallet
		const newUserIdentity: X509Identity = {
			credentials: {
				certificate: enrollment.certificate,
				privateKey: enrollment.key.toBytes(),
			},
			mspId: mspId,
			type: 'X.509',
		};

		await wallet.put(ethereumAddress, newUserIdentity);
		console.log(`Usuario ${ethereumAddress} registrado y enrolado con √©xito en ${mspId}`);
		return newUserIdentity;
	}



  async loginWithUserIDAndPassword(userID: string, password: string, mspId: string): Promise<User> {
    const ca = await this.getFabricCA(mspId);
    const wallet = await Wallets.newFileSystemWallet(walletPath);

    // üîç Intentar inscribir directamente al usuario con userID y password
    try {
        const enrollment = await ca.enroll({
            enrollmentID: userID,
            enrollmentSecret: password, // Se usa la contrase√±a para obtener certificado
        });

        // ‚úÖ Si el usuario se inscribe con √©xito, guardar la identidad en la wallet
        const newUserIdentity: X509Identity = {
            credentials: {
                certificate: enrollment.certificate,
                privateKey: enrollment.key.toBytes(),
            },
            mspId: mspId,
            type: 'X.509',
        };

        await wallet.put(userID, newUserIdentity);
        console.log(`‚úÖ Usuario ${userID} inscrito con √©xito y almacenado en la wallet`);

        // üî• Convertir la identidad en un objeto `User`
        return this.getUser(newUserIdentity);
    } catch (error) {
        console.error(`‚ùå Error en login: El usuario no est√° registrado o la contrase√±a es incorrecta`);
        throw new Error('Credenciales inv√°lidas o usuario no registrado');
    }
}


  async getUser(identity: X509Identity): Promise<User> {
    const cryptoSuite: ICryptoSuite = Utils.newCryptoSuite();
    const cryptoKeyStore = Utils.newCryptoKeyStore();
    cryptoSuite.setCryptoKeyStore(cryptoKeyStore);

    const privateKey = await cryptoSuite.importKey(identity.credentials.privateKey);
    const user = new User(identity.mspId);
    await user.setEnrollment(privateKey, identity.credentials.certificate, identity.mspId);
    user.setCryptoSuite(cryptoSuite);

    console.log(`‚úÖ Usuario ${identity.mspId} obtenido correctamente como User`);
    return user;
}
}
