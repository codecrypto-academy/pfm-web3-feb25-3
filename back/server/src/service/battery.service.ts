import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, FindManyOptions, FindOneOptions } from 'typeorm';
import { Battery } from '../domain/battery.entity';  // Aseg√∫rate de importar la entidad Battery
import { BatteryDTO } from './dto/battery.dto'; // Aseg√∫rate de importar el BatteryDTO
import { BatteryMapper } from './mapper/battery.mapper';
import { ObjectId } from 'mongodb';

@Injectable()
export class BatteryService {
  private readonly logger = new Logger(BatteryService.name);

  constructor(@InjectRepository(Battery) private batteryRepository: Repository<Battery>) {}

  // Buscar una bater√≠a por ID
  async findById(id: string): Promise<BatteryDTO | undefined> {
    try {
      this.logger.debug(`üîç Buscando bater√≠a con ID: ${id}`);

      const result = await this.batteryRepository.findOneBy({ _id: new ObjectId(id) });

      if (!result) {
        this.logger.warn(`‚ö†Ô∏è Bater√≠a con ID ${id} no encontrada.`);
        return undefined;
      }

      this.logger.log(`‚úÖ Bater√≠a con ID ${id} encontrada.`);
      return BatteryMapper.fromEntityToDTO(result);
    } catch (error) {
      this.logger.error(`‚ùå Error en findById(${id}):`, error);
      throw new Error("No se pudo obtener la bater√≠a. Int√©ntalo de nuevo m√°s tarde.");
    }
  }

  // Buscar una bater√≠a con opciones espec√≠ficas
  async find(options: FindOneOptions<Battery>): Promise<BatteryDTO | undefined> {
    this.logger.debug(`üîç Buscando bater√≠a con opciones: ${JSON.stringify(options)}`);
    const result = await this.batteryRepository.findOne(options);
    if (!result) {
      this.logger.warn(`‚ö†Ô∏è Bater√≠a no encontrada con opciones: ${JSON.stringify(options)}`);
      return undefined;
    }
    this.logger.log(`‚úÖ Bater√≠a encontrada con opciones: ${JSON.stringify(options)}`);
    return BatteryMapper.fromEntityToDTO(result);
  }

  // Buscar todas las bater√≠as
  async findAll(): Promise<BatteryDTO[]> {
    this.logger.debug("üîç Obteniendo todas las bater√≠as...");

    const batteries = await this.batteryRepository.find();
    if (batteries.length === 0) {
      this.logger.warn("‚ö†Ô∏è No se encontraron bater√≠as en la base de datos.");
      return [];
    }

    this.logger.log(`‚úÖ Se encontraron ${batteries.length} bater√≠as.`);
    return batteries.map(battery => BatteryMapper.fromEntityToDTO(battery));
  }

  // Guardar una bater√≠a (crear o actualizar)
  async save(batteryDTO: BatteryDTO): Promise<BatteryDTO | undefined> {
    this.logger.debug(`üíæ Guardando bater√≠a: ${JSON.stringify(batteryDTO)}`);

    const battery = BatteryMapper.fromDTOtoEntity(batteryDTO);
    const result = await this.batteryRepository.save(battery);

    this.logger.log(`‚úÖ Bater√≠a guardada con √©xito. ID: ${result._id}`);
    return BatteryMapper.fromEntityToDTO(result);
  }

  // Actualizar una bater√≠a
  async update(batteryDTO: BatteryDTO): Promise<BatteryDTO | undefined> {
    this.logger.debug(`üîÑ Actualizando bater√≠a: ${JSON.stringify(batteryDTO)}`);
    return this.save(batteryDTO);  // Reutilizamos el m√©todo save para crear o actualizar
  }

  // Eliminar una bater√≠a
  async delete(batteryDTO: BatteryDTO): Promise<BatteryDTO | undefined> {
    this.logger.debug(`üóëÔ∏è Eliminando bater√≠a con serialNumber: ${batteryDTO.serialNumber}`);

    const battery = BatteryMapper.fromDTOtoEntity(batteryDTO);
    const result = await this.batteryRepository.remove(battery);

    this.logger.log(`‚úÖ Bater√≠a con serialNumber ${batteryDTO.serialNumber} eliminada correctamente.`);
    return BatteryMapper.fromEntityToDTO(result);
  }
}
